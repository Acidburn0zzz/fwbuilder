#ifndef INC_PFCfgParserTokenTypes_hpp_
#define INC_PFCfgParserTokenTypes_hpp_

/* $ANTLR 2.7.7 (20090306): "pf.g" -> "PFCfgParserTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API PFCfgParserTokenTypes {
#endif
	enum {
		EOF_ = 1,
		NEWLINE = 4,
		LINE_COMMENT = 5,
		WORD = 6,
		EQUAL = 7,
		ANTISPOOF = 8,
		ALTQ = 9,
		QUEUE = 10,
		SET = 11,
		TIMEOUT = 12,
		// "ruleset-optimization" = 13
		LITERAL_optimization = 14,
		LITERAL_limit = 15,
		LITERAL_loginterface = 16,
		// "block-policy" = 17
		// "state-policy" = 18
		// "state-defaults" = 19
		// "require-order" = 20
		LITERAL_fingerprints = 21,
		LITERAL_skip = 22,
		LITERAL_debug = 23,
		LITERAL_reassemble = 24,
		// "tcp.first" = 25
		// "tcp.opening" = 26
		// "tcp.established" = 27
		// "tcp.closing" = 28
		// "tcp.finwait" = 29
		// "tcp.closed" = 30
		// "udp.first" = 31
		// "udp.single" = 32
		// "udp.multiple" = 33
		// "icmp.first" = 34
		// "icmp.error" = 35
		// "other.first" = 36
		// "other.single" = 37
		// "other.multiple" = 38
		LITERAL_frag = 39,
		LITERAL_interval = 40,
		// "src.track" = 41
		// "adaptive.start" = 42
		// "adaptive.end" = 43
		INT_CONST = 44,
		OPENING_BRACE = 45,
		COMMA = 46,
		CLOSING_BRACE = 47,
		SCRUB = 48,
		TABLE = 49,
		LESS_THAN = 50,
		GREATER_THAN = 51,
		PERSIST = 52,
		CONST = 53,
		COUNTERS = 54,
		FILE = 55,
		STRING = 56,
		EXLAMATION = 57,
		COLON = 58,
		NETWORK = 59,
		BROADCAST = 60,
		PEER = 61,
		SELF = 62,
		IPV4 = 63,
		SLASH = 64,
		NO = 65,
		NAT = 66,
		PASS = 67,
		MINUS = 68,
		STATIC_PORT = 69,
		RDR = 70,
		OPENING_PAREN = 71,
		CLOSING_PAREN = 72,
		PORT = 73,
		IPV6 = 74,
		STAR = 75,
		BITMASK = 76,
		RANDOM = 77,
		SOURCE_HASH = 78,
		HEX_KEY = 79,
		STRING_KEY = 80,
		ROUND_ROBIN = 81,
		STICKY_ADDRESS = 82,
		BINAT = 83,
		BLOCK = 84,
		DROP = 85,
		RETURN = 86,
		RETURN_RST = 87,
		TTL = 88,
		RETURN_ICMP = 89,
		RETURN_ICMP6 = 90,
		IN = 91,
		OUT = 92,
		LOG = 93,
		ALL = 94,
		USER = 95,
		TO = 96,
		QUICK = 97,
		ON = 98,
		INET = 99,
		INET6 = 100,
		PROTO = 101,
		IP = 102,
		ICMP = 103,
		IGMP = 104,
		TCP = 105,
		UDP = 106,
		RDP = 107,
		RSVP = 108,
		GRE = 109,
		ESP = 110,
		AH = 111,
		EIGRP = 112,
		OSPF = 113,
		IPIP = 114,
		VRRP = 115,
		L2TP = 116,
		ISIS = 117,
		FROM = 118,
		URPF_FAILED = 119,
		ANY = 120,
		NO_ROUTE = 121,
		ROUTE_TO = 122,
		REPLY_TO = 123,
		FLAGS = 124,
		ICMP_TYPE = 125,
		ICMP_CODE = 126,
		ICMP6_TYPE = 127,
		TAGGED = 128,
		TAG = 129,
		KEEP = 130,
		MODULATE = 131,
		SYNPROXY = 132,
		STATE = 133,
		LABEL = 134,
		EXIT = 135,
		QUIT = 136,
		INTRFACE = 137,
		ICMP6 = 138,
		IGRP = 139,
		IPSEC = 140,
		NOS = 141,
		PCP = 142,
		PIM = 143,
		PPTP = 144,
		RIP = 145,
		SNP = 146,
		HOST = 147,
		RANGE = 148,
		LOG_LEVEL_ALERTS = 149,
		LOG_LEVEL_CRITICAL = 150,
		LOG_LEVEL_DEBUGGING = 151,
		LOG_LEVEL_EMERGENCIES = 152,
		LOG_LEVEL_ERRORS = 153,
		LOG_LEVEL_INFORMATIONAL = 154,
		LOG_LEVEL_NOTIFICATIONS = 155,
		LOG_LEVEL_WARNINGS = 156,
		LOG_LEVEL_DISABLE = 157,
		LOG_LEVEL_INACTIVE = 158,
		Whitespace = 159,
		HEX_CONST = 160,
		NUMBER = 161,
		NEG_INT_CONST = 162,
		HEX_DIGIT = 163,
		DIGIT = 164,
		NUM_3DIGIT = 165,
		NUM_HEX_4DIGIT = 166,
		NUMBER_ADDRESS_OR_WORD = 167,
		PIPE_CHAR = 168,
		NUMBER_SIGN = 169,
		PERCENT = 170,
		AMPERSAND = 171,
		APOSTROPHE = 172,
		PLUS = 173,
		DOT = 174,
		SEMICOLON = 175,
		QUESTION = 176,
		COMMERCIAL_AT = 177,
		OPENING_SQUARE = 178,
		CLOSING_SQUARE = 179,
		CARET = 180,
		UNDERLINE = 181,
		TILDE = 182,
		DOUBLE_QUOTE = 183,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_PFCfgParserTokenTypes_hpp_*/
